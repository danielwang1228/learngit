一、安装git
1.1 不同平台
(1) Linux: yum -y install git
(2) Windows：先从http://www.git-scm.com/download/下载Windows版的git，然后安装，推荐Git for Windows Portable

1.2 设置
 在命令行输入：
  git config --global user.name "Your Name"
  git config --global user.email "email@example.com"
 git config的--global参数，表示这台机器所有的Git仓库都使用这个配置。
 
 
二、创建版本库
1.1 版本库
 版本库又叫仓库(repository)，可简单理解成一个目录，此目录的所有内容都可以被git管理，
 每个文件的创建、修改、删除都能跟踪，并能追踪历史。
 (1) 第一步，创建一个新目录并进入这个目录中，命令：
  $ mkdir learngit
  $ cd learngit
 (2) 第二步，使用命令把这个目录变成Git可以管理的仓库，命令：
  $ git init
  这时当前目录多了一个.git的目录，它是Git用于管理版本库的，不可修改！
  
1.2 添加文件到版本库
 注意，只能跟踪文本文件的改动，二进制文件也可管理，但不能跟踪变化。
 (1) 首先，创建一个readme.txt文件，内容如下：
  Git is a version control system.
  Git is free software.
 (2) 第一步，使用命令添加文件到仓库。命令：
  $ git add readme.txt
  git add <file> 注意，可反复多次使用，添加多个文件；
 (3) 第二步，用命令提交到仓库。命令：
  $ git commit -m "本次提交的说明"
 可以多次add不同的文件，commit可以一次提交多个文件。

三、文件管理
1.1 查看版本库当前状态
  $ git status
  当修改了文件后，add之前，会有如下字样
    # Changes not staged for commit:
    #   (use "git add <file>..." to update what will be committed)
    #   (use "git checkout -- <file>..." to discard changes in working directory)
  当先add了文件后，会有# Changes to be committed:字样，意为：将要提交。
  当工作区与版本库完全相同时，会有如下字样：
    # On branch master
    nothing to commit (working directory clean)
1.2 工作区的文件与版本库的文件对比
  $ git diff <file>
  显示的格式正是Unix通用的diff格式
  
1.3 查看记录
  $ git log
  查看提交记录，内容从进到远。使用参数--pretty=oneline可以每一个记录显示在一行中。
  重要信息包括：commit id，时间，操作人等。
  
  $ git reflog
  查看命令记录。
  
1.4 版本回退
  在Git中用HEAD表示当前版本，上一个版本就是HEAD^，上上一个版本就是HEAD^^，可以用数字表示：HEAD~n
  $ git reset --hard HEAD^/commit id
  回退到上一个版本 $ git reset --hard HEAD^ 。这时git log会看不到那个回退前的版本。可用$ git reflog查出需要回退的commit id。
  
1.5 工作区与暂存区
  工作区：就是电脑上的本地目录。
  版本库：是工作区中的隐藏目录.git
    暂存区：版本库中最重要的，称为stage。
    另外还有Git为我们自动创建的第一个分支master，以及指向master的一个指针叫HEAD。
  往版本库添加的时候分两步：
   (1) git add 就是把文件修改添加到暂存区。
   (2) git commit 就是把暂存区的所有内容提交到当前分支。
   git commit只负责提交暂存区的修改。 可以简单理解为，需要提交的文件修改通通放到暂存区，然后，一次性提交暂存区的所有修改。
  
1.6 管理修改
  (1) 查看工作区和版本库里面最新版本的区别
   $ git diff HEAD -- <file>

1.7 撤销修改
  (1) 丢弃工作区的修改
   $ git checkout -- <file>
  这里有两种情况：
    一种是文件自修改后还没有被放到暂存区，现在，撤销修改就回到和版本库一模一样的状态；
    一种是文件已经添加到暂存区后，又作了修改，现在，撤销修改就回到添加到暂存区后的状态。
    总之，就是让这个文件回到最近一次git commit或git add时的状态。
  (2) 撤销暂存区中的修改
   $ git reset HEAD <file>
  git reset命令既可以回退版本，也可以把暂存区的修改回退到工作区。当用HEAD时，表示最新的版本。
  
1.8 删除文件
  $ rm file
  $ git rm <file>
  $ git commit -m "说明"
  在rm file后, git xxx之前，如果要恢复文件到最新版本（只能恢复文件到最新版本，你会丢失最近一次提交后你修改的内容）：
  $ git checkout -- <file>
  
四、远程仓库
  4.1 使用GitHub。
	 (1) 注册账户
	 (2) 创建SSH Key，在用户主目录下，看看有没有.ssh目录，如果有，再看看这个目录下有没有id_rsa和id_rsa.pub这两个文件。如果没有，则创建：
	    $ ssh-keygen -t rsa -C "youremail@example.com"
	 (3) 登陆GitHub，打开“Account settings”，“SSH Keys”页面，点“Add SSH Key”，复制id_rsa.pub内容到文本框，Title可任意。可添加多个。
	 
  4.2 添加远程库
   (1) 登录GitHub并创建一个新仓库。名为learngit。
   (2) 把一个已有的本地仓库与之关联
     $ git remote add origin git@github.com:danielwang1228/learngit.git
     添加后，远程库的名字就是origin，也可改成别的。
   (3) 把本地库的所有内容推送到远程库上
     $ git push -u origin master
     第一次推送master分支时，加上了-u参数，Git不但会把本地的master分支内容推送的远程新的master分支，还会把本地的master分支和远程的master分支关联起来。
   (4) 拥有了真正的分布式版本库！可随时把本地master分支的最新修改推送至GitHub
     $ git push origin master
     
  4.3 从远程库克隆
   (1) 首先，登陆GitHub，创建一个新的仓库，名字叫gitskills
   (2) 用命令git clone克隆一个本地库
     $ git clone git@github.com:danielwang1228/gitskills.git
     如果有多个人协作开发，那么每个人各自从远程克隆一份就可以了。Git支持多种协议，包括https，但通过ssh支持的原生git协议速度最快。

五、分支管理
  当创建了自己的分支，别人看不到，可以在自己的分支上修改、提交等操作，到修改完毕后一次性合并到原来的分支上，既安全又不影响别人工作。
  5.1 主分支
    每次提交，Git都把它们串成一条时间线，这条时间线就是分支。Git默认会有一个master分支，即主分支，HEAD指向的是当前分支。每次提交，master
  都会向前移动一步，这样，随着不断的提交，master分支的线也越来越长。
  5.2 创建分支
    (1) 创建分支
      $ git branch dev
    (2) 切换分支
      $ git checkout dev
    (3) 创建分支并切换到新创建的分支
      $ git checkout -b <分支名>
      参数: -b 表示创建并切换分支。
      例如：git checkout -b dev
    (4) 查看当前分支
      $ git branch
      此命令会列出所有分支，当前分支前面会有一个*号。
    当创建新的分支，例如dev时，Git新建了一个指针叫dev，指向master相同的提交，再把HEAD指向dev，表示当前分支在dev上。现在开始，对工作区
    的修改和提交就是针对dev的分支了，提交一次后，dev指针往前移动一步，而master指针不变。
    (5) 合并分支
    	$ git merge <分支名>
    	git merge命令用于合并指定分支到当前分支。默认为Fast-forward模式，就是直接把master指向当前提交，速度很快。
    	当在dev分支上修改完后，想要合并到主分支时，要先切换到主分支 git checkout master，然后 git merge dev ，将dev分支合并到主分支上。
    (6) 删除分支
      $ git branch -d <分支名>

   5.2 解决冲突
     在多人协作的项目中，多个人同时修改同一个文件是常有的事，合并分支往往会有冲突。
     例如：创建一个新的分支feature1，并修改其中的文件并提交。切换到主分支修改同一个文件并提交。这样主分支和feature1分支都有自己新的提交，
   这种情况下，Git无法快速合并，只能试图把各自的修改合并起来，但这种合并可能会有冲突。
     $ git merge feature1
     Git会提示XX文件有冲突，必须手动解决冲突后再提交，如下：
      Auto-merging GitNote.txt
      CONFLICT (content): Merge conflict in GitNote.txt
      Automatic merge failed; fix conflicts and then commit the result.
     $ git status
     也会提示冲突的文件，如下：
      On branch master
      Your branch is ahead of 'origin/master' by 3 commits.
      (use "git push" to publish your local commits)
      You have unmerged paths.
      (fix conflicts and run "git commit")

      Unmerged paths:
      (use "git add <file>..." to mark resolution)

          both modified:   GitNote.txt

      no changes added to commit (use "git add" and/or "git commit -a")
    如果直接打开文件，Git用<<<<<<<，=======，>>>>>>>标记出不同分支的内容。
    手动解决冲突后再提交：
     $ git add <file>
     $ git commit -m "conflict fixed"
    这样就合并成功了。使用 git log 查看分支合并情况。
     $ git log --graph --pretty=oneline --abbrev-commit
		查看分支合并图：
		  git log --graph
		  
   5.3 分支管理策略
    在合并分支时，Git会尽可能用Fast forward模式，但这种模式下，删除分支后，会丢掉分支信息。
    如果要强制禁用Fast forward模式，Git就会在merge时生成一个新的commit，这样从分支历史上就可以看出分支信息。
     $ git merge --no-ff -m "merge with no-ff" dev
    这样合并会常见一个新的commit，因此加上-m参数，通过git log命令可查看到历史。
